import logging
import sqlite3
from datetime import datetime
from io import BytesIO

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, Filters
import requests
import openpyxl
from yookassa import Configuration, Payment

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7579479291:AAG19rYmyQicxbsrQUxKfGHw58Ies30pzEw'

# API –∫–ª—é—á Mention
MENTION_API_KEY = '8HArOU1F3V3tuQ9HrbkgGcgINHm4NSX8'

# URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Mention API
MENTION_API_URL = "https://api.mention.net/api/accounts/1307291_FATw1rY9njKlNuiSoew9seQeNuglgSNRLgivIuN9W6dpsx5eeijrZJYUv5v9TewY"

# –°—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É
SUPPORT_CHAT_LINK = 'https://t.me/support_chat'
INSTRUCTION_LINK = 'https://example.com/instruction'
OFFER_LINK = 'https://example.com/offer'
USER_AGREEMENT_LINK = 'https://example.com/user_agreement'

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ YooKassa
Configuration.account_id = '–≤–∞—à_account_id'
Configuration.secret_key = '–≤–∞—à_secret_key'

# –§–ª–∞–≥ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TEST_MODE = True

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
START_MESSAGE = (
    "–ü—Ä–∏–≤–µ—Ç!üëã\n"
    "–° –Ω–∞—à–∏–º –±–æ—Ç–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ Wildberries –≤ Instagram*.\n"
    "–≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± —É–∑–Ω–∞—Ç—å, –≥–¥–µ –∏ –∫–∞–∫ —á–∞—Å—Ç–æ —Ä–µ–∫–ª–∞–º–∏—Ä—É—é—Ç—Å—è –±—Ä–µ–Ω–¥—ã –∏ –ø—Ä–æ–¥–∞–≤—Ü—ã.\n\n"
    "üëâ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
    f"{SUPPORT_CHAT_LINK}\n"
    "üÜì –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫!\n\n"
    "* –ü—Ä–æ–µ–∫—Ç Meta Platforms Inc., –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –≤ –†–æ—Å—Å–∏–∏"
)

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —ç–º–æ–¥–∑–∏
INLINE_BUTTONS = [
    [InlineKeyboardButton("üîç Instagram", callback_data='instagram')],
    [InlineKeyboardButton("üí∞ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data='tariffs')],
    [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')],
    [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')],
    [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data='about')]
]

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É Instagram
INSTAGRAM_MESSAGE = (
    "–î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º –≤–∞—Å —Ç–æ–≤–∞—Ä–µ –≤ Instagram*üîç\n\n"
    "* –ü—Ä–æ–µ–∫—Ç Meta Platforms Inc., –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –≤ –†–æ—Å—Å–∏–∏"
)

# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ Instagram
INSTAGRAM_BUTTONS = [
    [InlineKeyboardButton("üÜî –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –±—Ä–µ–Ω–¥—É", callback_data='search_brand')],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]
]

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üí∞ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã"
TARIFFS_MESSAGE = (
    "–û–ø–ª–∞—á–∏–≤–∞—è —Ç–∞—Ä–∏—Ñ, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ Instagram.üí∞\n\n"
    "30 –¥–Ω–µ–π - 4990 —Ä—É–±. –ü–æ–¥–ø–∏—Å–∫–∞ —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ 30 –¥–Ω–µ–π\n"
    "60 –¥–Ω–µ–π - 8990 —Ä—É–±. –ü–æ–¥–ø–∏—Å–∫–∞ —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ 60 –¥–Ω–µ–π\n"
    "90 –¥–Ω–µ–π - 12990 —Ä—É–±. –ü–æ–¥–ø–∏—Å–∫–∞ —Å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ 90 –¥–Ω–µ–π\n\n"
    "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:\n"
    "[üî¥] –í—ã–∫–ª—é—á–µ–Ω\n"
    "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫."
)

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "üí∞ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã"
TARIFFS_BUTTONS = [
    [InlineKeyboardButton("30 –¥–Ω–µ–π - 4990 —Ä—É–±", callback_data='tariff_30')],
    [InlineKeyboardButton("60 –¥–Ω–µ–π - 8990 —Ä—É–±", callback_data='tariff_60')],
    [InlineKeyboardButton("90 –¥–Ω–µ–π - 12990 —Ä—É–±", callback_data='tariff_90')],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]
]

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
SETTINGS_MESSAGE = "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: [üî¥] –í—ã–∫–ª—é—á–µ–Ω"

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
SETTINGS_BUTTONS_OFF = [
    [InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂", callback_data='enable_autopay')],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]
]

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
SETTINGS_BUTTONS_ON = [
    [InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂", callback_data='disable_autopay')],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]
]

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
AUTOPAY_ENABLED_MESSAGE = (
    "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: [üü¢] –í–∫–ª—é—á–µ–Ω\n\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏.üí≥"
)

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
AUTOPAY_DISABLED_MESSAGE = "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: [üî¥] –í—ã–∫–ª—é—á–µ–Ω"

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
SUPPORT_MESSAGE = (
    "–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º—É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—É.üÜò\n\n"
    "–ß—Ç–æ–±—ã –≤–æ–ø—Ä–æ—Å –±—ã–ª —Ä–µ—à–µ–Ω –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–µ–µ, —Å–æ–æ–±—â–∏—Ç–µ —Å–≤–æ–π ID: 1090578494"
)

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
SUPPORT_BUTTONS = [
    [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=SUPPORT_CHAT_LINK)],
    [InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url=INSTRUCTION_LINK)],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]
]

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "‚ÑπÔ∏è –û –±–æ—Ç–µ"
ABOUT_MESSAGE = (
    "–° –Ω–∞—à–∏–º –±–æ—Ç–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ Wildberries –≤ Instagram.‚ÑπÔ∏è\n"
    "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ñ–µ—Ä—Ç–æ–π –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º –≤—ã –º–æ–∂–µ—Ç–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
)

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "‚ÑπÔ∏è –û –±–æ—Ç–µ"
ABOUT_BUTTONS = [
    [InlineKeyboardButton("–û—Ñ–µ—Ä—Ç–∞", url=OFFER_LINK)],
    [InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", url=USER_AGREEMENT_LINK)],
    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back')]
]

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üÜî –ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ –±—Ä–µ–Ω–¥—É"
SEARCH_BRAND_MESSAGE = (
    "–ü—Ä–∏—à–ª–∏—Ç–µ ID –±—Ä–µ–Ω–¥–∞ –∏–ª–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.üîç\n"
    "–ü—Ä–∏–º–µ—Ä:\n"
    "SvetoCopy\n"
    "28469"
)

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
PROMO_CODE_MESSAGE = "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω —É –≤–∞—Å –µ—Å—Ç—å, –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –±–µ–∑ –Ω–µ–≥–æ."

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
PROMO_CODE_BUTTONS = [
    [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–¥–∞", callback_data='continue_without_code')],
    [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel')]
]

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–¥–∞"
EMAIL_MESSAGE = "–í–≤–µ–¥–∏—Ç–µ e-mail, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —á–µ–∫."

# –°–æ–æ–±—â–µ–Ω–∏–µ –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ
FREE_ACCESS_MESSAGE = "‚ùóÔ∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –æ—Ç—á–µ—Ç–∞. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."

# –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
NO_FREE_QUERIES_MESSAGE = "‚õîÔ∏è –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n–ü–æ–¥–∫–ª—é—á–∏ –Ω–∞—à –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ:"

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
NO_FREE_QUERIES_BUTTONS = [
    [InlineKeyboardButton("üí∞ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data='tariffs')],
    [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data='back')]
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext) -> None:
    reply_markup = InlineKeyboardMarkup(INLINE_BUTTONS)
    if update.callback_query:
        update.callback_query.edit_message_text(text=START_MESSAGE, reply_markup=reply_markup)
    else:
        update.message.reply_text(START_MESSAGE, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /instagram
def instagram(update: Update, context: CallbackContext) -> None:
    reply_markup = InlineKeyboardMarkup(INSTAGRAM_BUTTONS)
    if update.callback_query:
        update.callback_query.edit_message_text(text=INSTAGRAM_MESSAGE, reply_markup=reply_markup)
    else:
        update.message.reply_text(INSTAGRAM_MESSAGE, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings
def settings(update: Update, context: CallbackContext) -> None:
    reply_markup = InlineKeyboardMarkup(SETTINGS_BUTTONS_OFF)
    if update.callback_query:
        update.callback_query.edit_message_text(text=SETTINGS_MESSAGE, reply_markup=reply_markup)
    else:
        update.message.reply_text(SETTINGS_MESSAGE, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()

    if query.data == 'instagram':
        instagram(update, context)
    elif query.data == 'tariffs':
        reply_markup = InlineKeyboardMarkup(TARIFFS_BUTTONS)
        query.edit_message_text(text=TARIFFS_MESSAGE, reply_markup=reply_markup)
    elif query.data == 'settings':
        settings(update, context)
    elif query.data == 'support':
        reply_markup = InlineKeyboardMarkup(SUPPORT_BUTTONS)
        query.edit_message_text(text=SUPPORT_MESSAGE, reply_markup=reply_markup)
    elif query.data == 'about':
        reply_markup = InlineKeyboardMarkup(ABOUT_BUTTONS)
        query.edit_message_text(text=ABOUT_MESSAGE, reply_markup=reply_markup)
    elif query.data == 'search_brand':
        query.edit_message_text(text=SEARCH_BRAND_MESSAGE)
        context.user_data['search_brand_mode'] = True
    elif query.data == 'back':
        reply_markup = InlineKeyboardMarkup(INLINE_BUTTONS)
        query.edit_message_text(text=START_MESSAGE, reply_markup=reply_markup)
    elif query.data.startswith('tariff_'):
        context.user_data['selected_tariff'] = query.data.split('_')[1]
        reply_markup = InlineKeyboardMarkup(PROMO_CODE_BUTTONS)
        query.edit_message_text(text=PROMO_CODE_MESSAGE, reply_markup=reply_markup)
    elif query.data == 'continue_without_code':
        query.edit_message_text(text=EMAIL_MESSAGE)
    elif query.data == 'cancel':
        reply_markup = InlineKeyboardMarkup(INLINE_BUTTONS)
        query.edit_message_text(text=START_MESSAGE, reply_markup=reply_markup)
    elif query.data == 'enable_autopay':
        reply_markup = InlineKeyboardMarkup(SETTINGS_BUTTONS_ON)
        query.edit_message_text(text=AUTOPAY_ENABLED_MESSAGE, reply_markup=reply_markup)
    elif query.data == 'disable_autopay':
        reply_markup = InlineKeyboardMarkup(SETTINGS_BUTTONS_OFF)
        query.edit_message_text(text=AUTOPAY_DISABLED_MESSAGE, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update: Update, context: CallbackContext) -> None:
    user_input = update.message.text
    user_id = update.message.from_user.id

    if 'selected_tariff' in context.user_data:
        if user_input.lower() == 'cancel':
            del context.user_data['selected_tariff']
            reply_markup = InlineKeyboardMarkup(INLINE_BUTTONS)
            update.message.reply_text(START_MESSAGE, reply_markup=reply_markup)
        else:
            handle_payment(update, context)
    elif 'search_brand_mode' in context.user_data:
        if TEST_MODE or check_free_queries(user_id):
            brand_info = search_brand_in_mention(user_input)
            if brand_info:
                update.message.reply_text(brand_info)
                update.message.reply_text(FREE_ACCESS_MESSAGE)
                excel_file_path = generate_excel_file(user_id, user_input, brand_info)
                with open(excel_file_path, 'rb') as file:
                    update.message.reply_document(document=InputFile(file, filename=os.path.basename(excel_file_path)))
                os.remove(excel_file_path)  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            else:
                update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ç–∞–∫–æ–≥–æ –±—Ä–µ–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            del context.user_data['search_brand_mode']
        else:
            reply_markup = InlineKeyboardMarkup(NO_FREE_QUERIES_BUTTONS)
            update.message.reply_text(NO_FREE_QUERIES_MESSAGE, reply_markup=reply_markup)
    else:
        update.message.reply_text(f"–í—ã –≤–≤–µ–ª–∏: {user_input}")

def search_brand_in_mention(brand_input):
    headers = {
        "Authorization": f"Bearer {MENTION_API_KEY}"
    }
    params = {
        "q": brand_input
    }
    try:
        response = requests.get(MENTION_API_URL, headers=headers, params=params)
        response.raise_for_status()
        data = response.json()
        brand_info = data.get('brand_info', {})
        mentions = data.get('mentions', [])

        if brand_info and mentions:
            return (
                f"–ë—Ä–µ–Ω–¥: {brand_info.get('name', '')} [ID: {brand_info.get('id', '')}]\n\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(mentions)}\n"
                f"üì∫ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {brand_info.get('account_count', '')}\n"
                f"üìÖ –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {brand_info.get('first_mention_date', '')}\n"
                f"üìÖ –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {brand_info.get('last_mention_date', '')}\n\n"
                "–°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º:\n"
                f"üëÅ‚Äçüó® –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {brand_info.get('total_views', '')}\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {brand_info.get('total_comments', '')}\n"
                f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {brand_info.get('total_likes', '')}\n\n"
                "‚åõÔ∏è –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è, –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≤–∞–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 1 –º–∏–Ω—É—Ç—ã"
            )
        else:
            return None
    except requests.exceptions.HTTPError as e:
        if e.response.status_code == 401:
            print("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.")
        elif e.response.status_code == 403:
            print("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, API –∫–ª—é—á –æ—Ç–∫–ª—é—á–µ–Ω.")
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Mention API: {e}")
        return None
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Mention API: {e}")
        return None

def generate_excel_file(user_id, brand_name, brand_info):
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Worksheet"

    headers = [
        "–Æ–∑–µ—Ä–Ω–µ–π–º", "–ò–º—è", "–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", "–ü–æ–¥–ø–∏—Å–æ–∫", "–ü–æ—Å—Ç–æ–≤", "–°—Å—ã–ª–∫–∞", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", "–õ–∞–π–∫–æ–≤",
        "ER (Engagement Rate)", "–î–∞—Ç–∞ –ø–æ—Å—Ç–∞", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–ò–º—è –±—Ä–µ–Ω–¥–∞", "ID –±—Ä–µ–Ω–¥–∞", "ID –ø—Ä–æ–¥–∞–≤—Ü–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
    ]
    ws.append(headers)

    mentions = brand_info.get('mentions', [])
    for mention in mentions:
        ws.append([
            mention.get('username', ''),
            mention.get('name', ''),
            mention.get('followers', ''),
            mention.get('following', ''),
            mention.get('posts', ''),
            mention.get('link', ''),
            mention.get('description', ''),
            mention.get('views', ''),
            mention.get('comments', ''),
            mention.get('likes', ''),
            mention.get('engagement_rate', ''),
            mention.get('post_date', ''),
            mention.get('article', ''),
            mention.get('product_name', ''),
            brand_name,
            brand_info.get('brand_info', {}).get('id', ''),
            mention.get('seller_id', ''),
            mention.get('category', '')
        ])

    file_name = f"result-{user_id}-{brand_info.get('brand_info', {}).get('id', '')}.xlsx"
    file_path = os.path.join(os.getcwd(), file_name)
    wb.save(file_path)

    return file_path

def handle_payment(update: Update, context: CallbackContext) -> None:
    user_input = update.message.text
    if 'selected_tariff' in context.user_data:
        tariff_days = context.user_data['selected_tariff']
        if tariff_days == '30':
            amount = 4990
        elif tariff_days == '60':
            amount = 8990
        elif tariff_days == '90':
            amount = 12990
        else:
            update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
            return

        payment_link = create_payment_link(amount, f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {tariff_days} –¥–Ω–µ–π")
        reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} —Ä—É–±.", url=payment_link)]])
        update.message.reply_text(
            "–û–ø–ª–∞—Ç–∏–≤ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø. –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.\n\n"
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 1 –º–∏–Ω—É—Ç—ã.",
            reply_markup=reply_markup
        )
        del context.user_data['selected_tariff']

def create_payment_link(amount, description):
    payment = Payment.create({
        "amount": {
            "value": str(amount),
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/–≤–∞—à_–±–æ—Ç"  # URL, –∫—É–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        },
        "capture": True,
        "description": description
    })
    return payment.confirmation.confirmation_url

def init_db():
    conn = sqlite3.connect('payments.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            email TEXT,
            access_until DATETIME,
            free_queries INTEGER DEFAULT 5
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS payments (
            payment_id TEXT PRIMARY KEY,
            user_id INTEGER,
            amount REAL,
            status TEXT,
            created_at DATETIME,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    conn.commit()
    conn.close()

init_db()

def check_access(user_id):
    if TEST_MODE:
        return True

    conn = sqlite3.connect('payments.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT access_until FROM users WHERE user_id = ?
    ''', (user_id,))
    result = cursor.fetchone()
    conn.close()

    if result and result[0] > datetime.now():
        return True
    return False

def check_free_queries(user_id):
    if TEST_MODE:
        return True

    conn = sqlite3.connect('payments.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT free_queries FROM users WHERE user_id = ?
    ''', (user_id,))
    result = cursor.fetchone()
    conn.close()

    if result and result[0] > 0:
        conn = sqlite3.connect('payments.db')
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE users SET free_queries = free_queries - 1 WHERE user_id = ?
        ''', (user_id,))
        conn.commit()
        conn.close()
        return True
    return False

def run_telegram_bot():
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("instagram", instagram))
    dispatcher.add_handler(CommandHandler("settings", settings))
    dispatcher.add_handler(CallbackQueryHandler(button))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    run_telegram_bot()